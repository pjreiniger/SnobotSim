

repositories {
    mavenCentral()
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release/"
    }
}

configurations {
    wpilibjJni
}

dependencies {
    wpilibjJni 'edu.wpi.first.wpilibj:wpilibj-jniShared:' + getWpilibjVersion() + ':all'
}

task extractWpilibjJniShared(type: Copy) {
    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    destinationDir = file("$rootDir/build/dependencies/wpilibj-jniShared")
    configurations.wpilibjJni.each {
        from(zipTree(it)) {
            into os_name + "x86-64/"
        }
    }
}


task captureWpiLibraries(type: Jar, dependsOn: extractWpilibjJniShared) {

    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    baseName = "wpilib_capture"
    destinationDir = file("$rootDir/build/wpi_libraries")
    classifier = "wpi_native-" + os_name;

    def libraries = ["wpilibj-jniShared",
                     "wpiutil-cpp",
                     "halsim-adx_gyro_accelerometer",
                     "hal"]

    libraries.each{
        def full_path = "$rootDir/build/dependencies/" + it + "/" + os_name + "x86-64/" + os_name + "/x86-64/shared"
        println full_path
        from(full_path) {
            into os_name + "/x86-64/"
            include "*.dll"
            include "*.so"
            include "*.dylib"
        }
    }

    libraries.each{
        def full_path = "$rootDir/build/dependencies/" + it + "/" + os_name + "x86/" + os_name + "/x86/shared"
        println full_path
        from(full_path) {
            into os_name + "/x86/"
            include "*.dll"
            include "*.so"
            include "*.dylib"
        }
    }
}
