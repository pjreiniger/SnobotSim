
import org.gradle.internal.os.OperatingSystem


def nativeclassifier = (
    OperatingSystem.current().isWindows() ?
    System.getProperty("os.arch") == 'amd64' ? 'windowsx86-64' : 'windowsx86' :
    OperatingSystem.current().isMacOsX() ? "osxx86-64" :
    OperatingSystem.current().isLinux() ? "linuxx86-64" :
    null
)

def nativeCtreclassifier = (
    OperatingSystem.current().isWindows() ?
    System.getProperty("os.arch") == 'amd64' ? 'windows-x86-64' : 'windows-x86' :
    OperatingSystem.current().isMacOsX() ? "os x" :
    OperatingSystem.current().isLinux() ? "linux" :
    null
)

configurations.maybeCreate("wpilibNativeDeps")
dependencies {
        
    wpilibNativeDeps 'edu.wpi.first.wpiutil:wpiutil-cpp:' + getWpiUtilVersion() + ":${nativeclassifier}@zip"
    wpilibNativeDeps 'edu.wpi.first.hal:hal:' + allwpilibVersion() + ":${nativeclassifier}@zip"
    wpilibNativeDeps 'edu.wpi.first.halsim:halsim-adx_gyro_accelerometer:' + allwpilibVersion() + ":${nativeclassifier}@zip"
    wpilibNativeDeps 'edu.wpi.first.wpilibj:wpilibj-jniShared:' + allwpilibVersion() + ":${nativeclassifier}"
    wpilibNativeDeps 'com.snobot.simulator:ctre_sim_override:' + getCtreSimVersion() + ":native-${nativeCtreclassifier}"
}

task extract_wpilib {
    
    FileCollection extractedFiles = null as FileCollection
    
    configurations.wpilibNativeDeps.dependencies
        .matching { Dependency dep -> dep != null && configurations.wpilibNativeDeps.files(dep).size() > 0 }
        .all { dep ->
            def ziptree = project.zipTree(configurations.wpilibNativeDeps.files(dep).first())
            ["**/*.so*", "**/*.so", "**/*.dll", "**/*.dylib"].collect { String pattern ->
                def fc = ziptree.matching { PatternFilterable pat -> pat.include(pattern) }
                if (extractedFiles == null) extractedFiles = fc
                else extractedFiles += fc
            }
        }

    File dir = new File(project.buildDir, "extracted_native")
    if (dir.exists()) dir.deleteDir()
    dir.parentFile.mkdirs()
    
    if (project.tasks.findByName('packageNativeFiles')) {
        dependsOn packageNativeFiles
    }
    
    doLast {
        project.copy { CopySpec s ->
            s.from(project.files { extractedFiles.files })
            s.into(dir)
        }
    }

    
    if (OperatingSystem.current().isUnix()) {
        test.environment "LD_LIBRARY_PATH", dir.toString()
    } else if (OperatingSystem.current().isWindows()) {
        test.environment "PATH", dir.toString()
    }
    
    
    project.eclipse.classpath.file.whenMerged { classpath ->
        classpath.entries.each {
            if(it.path.contains("wpilibj")) {
                it.setNativeLibraryLocation(dir.toString())
            }
        }
    }
}