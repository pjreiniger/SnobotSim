

ext.getVersionName = { ->
    def output = "Unknown"

    if(System.getenv('APPVEYOR_BUILD_NUMBER') != null)
    {
        output = "Appveyor build #" + System.getenv('APPVEYOR_BUILD_NUMBER') +
            " for commit " + System.getenv('APPVEYOR_REPO_COMMIT')
    }
    else if(System.getenv('TRAVIS_BUILD_NUMBER') != null)
    {
        output = "Travis CI build #" + System.getenv('TRAVIS_BUILD_NUMBER') + " for commit " + System.getenv('TRAVIS_COMMIT')
    }
    else
    {
        try
        {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short', 'HEAD'
                standardOutput = stdout
            }
            output = "Local build.  Last commit: " + stdout.toString().trim()
        }
        catch(Exception e)
        {
            e.printStackTrace()
        }
    }

    return output
}


ext.createJavaVersion  = { destinationDir, className, thePackage, version ->

    def versionClass = """
package ${thePackage};

/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */

public final class ${className} {
    public static final String Version = "${version}";
}
    """.trim()

    def generated_dir = new File("$buildDir/generated/java", destinationDir)
    generated_dir.mkdirs()
    def versionFile = file(new File(generated_dir, className + ".java"))


    if (versionFile.exists()) {
        versionFile.delete()
    }
    versionFile.write(versionClass)
}

ext.createCppVersion  = { destinationDir, namespace, className, version ->

    def versionClass = """

/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */
#include "SnobotSim/SnobotSimHalVersion.h"
const char* ${namespace}::GetSnobotSimVersion()
{
    return "${version}";;
}
""".trim()

    def generated_dir = new File("$buildDir/generated/cpp", destinationDir)
    generated_dir.mkdirs()
    def versionFile = file(new File(generated_dir, className + ".cpp"))


    if (versionFile.exists()) {
        versionFile.delete()
    }
    versionFile.write(versionClass)
}
