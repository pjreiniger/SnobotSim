
import org.gradle.internal.os.OperatingSystem


apply plugin: 'cpp'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: "${rootDir}/common/base_java_script.gradle"
apply from: '../config.gradle'


dependencies {
    compile project(":snobot_sim_utilities")
}

task "packageNative${libraryName}FilesInJar"(type: Jar) {
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            println "Unpacking ${libraryName}"
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == project.libraryName)
                {
                    from(binary.sharedLibraryFile) {
                        into project.getNativeVersion(binary)
                    }
                }
                if(project.hasProperty("extra_libraries"))
                {
                    project.extra_libraries.each {
                        if (binary.component.name == it[1])
                        {
                            from(binary.sharedLibraryFile) {
                                into project.getNativeVersion(binary)
                            }
                        }
                    }
                }
            }
        }
    }
}

build.dependsOn "packageNative${libraryName}FilesInJar"

test {
    ignoreFailures = !OperatingSystem.current().isWindows()
}


model {
    jniConfigs {
        "${libraryName}"(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/../snobot_sim_gui/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
    }

    components {
        "${libraryName}"(NativeLibrarySpec) {
            baseName = project.libraryBaseName

            sources {
                cpp {
                    source {
                        srcDirs = project.librarySrcDirs
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = project.libraryHeaderDirs
                    }

                    if(project.hasProperty("extra_libraries"))
                    {
                        project.extra_libraries.each {
                             lib project: it[0], library: it[1], linkage:it[2]
                        }
                    }
                }
            }
        }
    }
}

apply from: "${rootDir}/common/base_jni_publish.gradle"
