apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: 'edu.wpi.first.GradleJni'

apply from: "${rootDir}/common/config.gradle"

ext {
    baseId = nativeName
    groupId = "com.snobot.${nativeName}"
}

apply from: "${rootDir}/common/base_java_script.gradle"

model {
    components {
        "${nativeName}Base"(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs = ['src/main/native/cpp']
                        if (project.hasProperty('generatedSources')) {
                            srcDirs += generatedSources
                        }
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDir 'src/main/native/include'
                        include '**/*.h'
                    }
                }
            }
            if(project.hasProperty("additional_local_libraries"))
            {
                binaries.all {
                    for (List lib_tuple : additional_local_libraries)
                    {
                        lib project: lib_tuple[0],  library: lib_tuple[1], linkage: lib_tuple[2]
                    }
                }
            }

            nativeUtils.useRequiredLibrary(it, *wpi_deps)
        }
        "${nativeName}"(NativeLibrarySpec) {
            if (project.hasProperty('setBaseName')) {
                baseName = setBaseName
            }
            sources {
                cpp {
                    source {
                        srcDirs "${rootDir}/common/dummy_cpp"
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDir 'src/main/native/include'
                        if (project.hasProperty('generatedHeaders')) {
                            srcDir generatedHeaders
                        }
                    }
                }
            }
            if(project.hasProperty("additional_local_libraries"))
            {
                binaries.all {
                    for (List lib_tuple : additional_local_libraries)
                    {
                        lib project: lib_tuple[0],  library: lib_tuple[1], linkage: lib_tuple[2]
                    }
                }
            }
            appendDebugPathToBinaries(binaries)
        }
        "${nativeName}JNIShared"(JniNativeLibrarySpec) {
            baseName = nativeName + 'jni'

            enableCheckTask true
            javaCompileTasks << compileJava
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.raspbian)
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.aarch64bionic)
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/jni'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDir 'src/main/native/include'
                        if (project.hasProperty('generatedHeaders')) {
                            srcDir generatedHeaders
                        }
                        include '**/*.h'
                    }

                }
            }
            binaries.all {
                if (it instanceof StaticLibraryBinarySpec) {
                    it.buildable = false
                    return
                }
                lib library: "${nativeName}Base", linkage: 'shared'
                if (project.hasProperty('jniSplitSetup')) {
                    jniSplitSetup(it)
                }
            }
            nativeUtils.useRequiredLibrary(it, *wpi_deps)
        }
        "${nativeName}JNI"(JniNativeLibrarySpec) {
            if (project.hasProperty('setBaseName')) {
                baseName = setBaseName + 'jni'
            } else {
                baseName = nativeName + 'jni'
            }

            enableCheckTask true
            javaCompileTasks << compileJava
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.raspbian)
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.aarch64bionic)
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/jni'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDir 'src/main/native/include'
                        if (project.hasProperty('generatedHeaders')) {
                            srcDir generatedHeaders
                        }
                        include '**/*.h'
                    }

                }
            }
            binaries.all {
                if (it instanceof StaticLibraryBinarySpec) {
                    it.buildable = false
                    return
                }
                lib library: "${nativeName}Base", linkage: 'static'
            }
            if(project.hasProperty("additional_local_libraries"))
            {
                binaries.all {
                    for (List lib_tuple : additional_local_libraries)
                    {
                        lib project: lib_tuple[0],  library: lib_tuple[1], linkage: lib_tuple[2]
                    }
                }
            }

            nativeUtils.useRequiredLibrary(it, *wpi_deps)
        }
        // By default, a development executable will be generated. This is to help the case of
        // testing specific functionality of the library.
        "${nativeName}Dev"(NativeExecutableSpec) {
            targetBuildTypes 'release'
            sources {
                cpp {

                    source {
                        srcDirs 'src/dev/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDir 'src/main/native/include'
                        if (project.hasProperty('generatedHeaders')) {
                            srcDir generatedHeaders
                        }
                    }
                }
            }
            binaries.all {
                lib library: "${nativeName}Base", linkage: 'shared'
                lib library: "${nativeName}JNIShared", linkage: 'shared'
            }
            nativeUtils.useRequiredLibrary(it, *wpi_deps)
        }
    }
    binaries {
        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: nativeName, linkage: 'shared'
        }
    }
    tasks {
        def c = $.components
        project.tasks.create('runCpp', Exec) {
            group = 'WPILib'
            description = "Run the ${nativeName}Dev executable"
            def found = false
            def systemArch = getCurrentArch()
            c.each {
                if (it in NativeExecutableSpec && it.name == "${nativeName}Dev") {
                    it.binaries.each {
                        if (!found) {
                            def arch = it.targetPlatform.name
                            if (arch == systemArch) {
                                dependsOn it.tasks.install
                                commandLine it.tasks.install.runScriptFile.get().asFile.toString()
                                def filePath = it.tasks.install.installDirectory.get().toString() + File.separatorChar + 'lib'
                                test.dependsOn it.tasks.install
                                test.systemProperty 'java.library.path', filePath
                                test.environment 'LD_LIBRARY_PATH', filePath
                                test.workingDir filePath

                                found = true
                            }
                        }
                    }
                }
            }
        }
    }
}

ext.getJniSpecClass = {
    return JniNativeLibrarySpec
}

tasks.withType(RunTestExecutable) {
    args "--gtest_output=xml:test_detail.xml"
    outputs.dir outputDir
}


apply from: "${rootDir}/common/base_jni_publish.gradle"
