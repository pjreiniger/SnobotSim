import edu.wpi.first.nativeutils.NativeUtils


ext
{
    // Things for the base script
    libraryName = "navx_simulator_jni"
    getNativeVersion = { binary -> NativeUtils.getPlatformPath(binary) }
    jniClasses = ['com.snobot.simulator.navx.I2CNavxSimulatorJni', 'com.snobot.simulator.navx.SpiNavxSimulatorJni']

    libraryBaseName = 'navx_simulator'
    librarySrcDirs = [ 'src/main/native']
    libraryHeaderDirs = [ "src/main/native/include", ]

    baseId = "navx_simulator"
    baseArtifactId = 'navx_simulator'
    artifactGroupId = 'com.snobot.simulator'
}

apply from: "${rootDir}/common/base_jni_script.gradle"

ext.addNavxToLinker = { binary->
    binary.lib project: ':sim_extension_navx', library: 'navx_simulator', linkage: 'shared'
}

model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ navx_simulator_jni: [] ]
        }
        halsim(DependencyConfig) {
            groupId = 'edu.wpi.first.hal'
            artifactId = 'hal-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = allwpilibVersion()
            sharedConfigs = [ navx_simulator_jni: []  ]
        }
    }
    exportsConfigs {
        navx_simulator(ExportsConfig) {
            x86ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
            x64ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
        }
    }
}


configurations.maybeCreate("wpilibNativeDeps")
dependencies {

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.5.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.5.0'
    testRuntime 'org.junit.platform:junit-platform-launcher:1.5.0'
    testCompile "com.kauailabs.navx.frc:navx-java:" + getNavxVersion()

    testCompile project(":snobot_sim_utilities")
    wpilibNativeDeps project(':sim_extension_navx').packageNativeFiles.outputs.files


    testCompile 'edu.wpi.first.hal:hal-java:' + allwpilibVersion()
    testCompile 'edu.wpi.first.wpilibj:wpilibj-java:' + allwpilibVersion()
    testRuntime 'edu.wpi.first.cameraserver:cameraserver-java:' + allwpilibVersion()
    testRuntime 'edu.wpi.first.wpiutil:wpiutil-java:' + getWpiUtilVersion()
    testCompile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    testRuntime 'edu.wpi.first.cscore:cscore-java:' + getCsCoreVersion()
    testRuntime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':all'
    testRuntime 'edu.wpi.first.cscore:cscore-jni:' + getCsCoreVersion() + ':all'
    testRuntime 'org.opencv:opencv-java:' + getWpilibOpencvVersion()
    testRuntime 'org.opencv:opencv-jni:' + getWpilibOpencvVersion() + ':all'

}

apply from: "${rootDir}/common/extract_native_libraries.gradle"
test.dependsOn extract_wpilib
