
evaluationDependsOn(':snobot_sim_utilities')

ext
{
    baseId = "snobot_sim_joysticks"
    additional_external_libraries = ["hal_shared", "wpiutil_shared"]
}

apply from: "${rootDir}/common/base_java_script.gradle"
apply from: "${rootDir}/common/base_java_native_script.gradle"

configurations.maybeCreate("wpilibNativeDeps")
dependencies {
    // WPILib
    compile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    compile 'edu.wpi.first.wpilibj:wpilibj-java:' + allwpilibVersion()
    compile 'edu.wpi.first.wpiutil:wpiutil-java:' + getWpiUtilVersion()
    compile 'edu.wpi.first.hal:hal-java:' + allwpilibVersion()

    // 3rd Party
    compile 'net.java.jinput:jinput:2.0.9'

    // Internal
    compile project(":snobot_sim_utilities")

    // Test
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    testRuntime 'org.junit.platform:junit-platform-launcher:1.5.1'
    testRuntime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':' + getCurrentOsArch()
}

eclipse.classpath.file {
    withXml {
        provider ->
        provider.asNode().findAll { it.@path.contains("jinput") && !it.@path.contains("natives") }.each {
                def container = it
                container.appendNode('attributes').appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:"snobot_sim_gui/build/native_libs"])
        }
    }
}

spotbugs {
    ignoreFailures = true
}
