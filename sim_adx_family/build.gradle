import edu.wpi.first.nativeutils.NativeUtils


ext
{
    // Things for the base script
    libraryName = "adx_family_jni"
    getNativeVersion = { binary -> NativeUtils.getPlatformPath(binary) }
    jniClasses = [
        'edu.wpi.first.hal.sim.mockdata.ADXL345_I2CAccelerometerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.ADXL345_SPIAccelerometerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.ADXL362AccelerometerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.ADXRS450_GyroDataJNI'
    ]
    
    libraryBaseName = 'adx_family_jni'
    librarySrcDirs = ['src/main/native/sim']
    libraryHeaderDirs = ["cpp/lib"]
}

if (!project.hasProperty('onlyAthena')) {
    ext.skipAthena = true

   apply from: "${rootDir}/common/base_jni_script.gradle"


    model {
        dependencyConfigs {
            wpiutil(DependencyConfig) {
                groupId = 'edu.wpi.first.wpiutil'
                artifactId = 'wpiutil-cpp'
                headerClassifier = 'headers'
                ext = 'zip'
                version = getWpiUtilVersion()
                sharedConfigs = [ adx_family_jni: [] ]
            }
            halsim(DependencyConfig) {
                groupId = 'edu.wpi.first.hal'
                artifactId = 'hal'
                headerClassifier = 'headers'
                ext = 'zip'
                version = getHalHeadersVersion()
                sharedConfigs = [ adx_family_jni: []  ]
            }
            adxfamily(DependencyConfig) {
                groupId = 'edu.wpi.first.halsim'
                artifactId = 'halsim-adx_gyro_accelerometer'
                headerClassifier = 'headers'
                ext = 'zip'
                version = getHalHeadersVersion()
                sharedConfigs = [ adx_family_jni: [] ]
            }
        }
    }
}
