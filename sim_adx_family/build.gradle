import edu.wpi.first.nativeutils.NativeUtils


ext
{
    // Things for the base script
    libraryName = "adx_family_jni"
    getNativeVersion = { binary -> NativeUtils.getPlatformPath(binary) }
    jniClasses = [
        'edu.wpi.first.hal.sim.mockdata.ADXL345_I2CAccelerometerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.ADXL345_SPIAccelerometerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.ADXL362AccelerometerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.ADXRS450_GyroDataJNI'
    ]

    libraryBaseName = 'adx_family'
    librarySrcDirs = ['src/main/native/cpp/sim']
    libraryHeaderDirs = ['src/main/native/cpp/sim']

    baseId = "adx_family"
    baseArtifactId = 'adx_family'
    artifactGroupId = 'com.snobot.simulator'
}


apply from: "${rootDir}/common/base_jni_script.gradle"

 model {
     dependencyConfigs {
         wpiutil(DependencyConfig) {
             groupId = 'edu.wpi.first.wpiutil'
             artifactId = 'wpiutil-cpp'
             headerClassifier = 'headers'
             ext = 'zip'
             version = getWpiUtilVersion()
             sharedConfigs = [ adx_family_jni: [], adx_family_jniDev: [] ]
         }
         halsim(DependencyConfig) {
             groupId = 'edu.wpi.first.hal'
             artifactId = 'hal-cpp'
             headerClassifier = 'headers'
             ext = 'zip'
             version = allwpilibVersion()
             sharedConfigs = [ adx_family_jni: [], adx_family_jniDev: [] ]
         }
         adxfamily(DependencyConfig) {
             groupId = 'edu.wpi.first.halsim'
             artifactId = 'halsim_adx_gyro_accelerometer'
             headerClassifier = 'headers'
             ext = 'zip'
             version = allwpilibVersion()
             sharedConfigs = [ adx_family_jni: [], adx_family_jniDev: [] ]
         }
     }

     components {
        // By default, a development executable will be generated. This is to help the case of
        // testing specific functionality of the library.
        "${libraryName}Dev"(NativeExecutableSpec) {
            sources {
                cpp {

                    source {
                        srcDirs 'src/dev/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/dev/native/include'
                    }
                }
            }
            binaries.all {
                lib library: libraryName, linkage: 'shared'
            }
        }
     }
 }

configurations.maybeCreate("wpilibNativeDeps")
dependencies {

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.5.1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    testRuntime 'org.junit.platform:junit-platform-launcher:1.5.1'

    testCompile project(":snobot_sim_utilities")
    wpilibNativeDeps project(':sim_adx_family').packageNativeFiles.outputs.files

    testCompile 'edu.wpi.first.hal:hal-java:' + allwpilibVersion()
    testCompile 'edu.wpi.first.wpilibj:wpilibj-java:' + allwpilibVersion()
    testRuntime 'edu.wpi.first.wpiutil:wpiutil-java:' + getWpiUtilVersion()
    testRuntime 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    testRuntime 'edu.wpi.first.cscore:cscore-java:' + getCsCoreVersion()
    testRuntime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':all'
    testRuntime 'edu.wpi.first.cscore:cscore-jni:' + getCsCoreVersion() + ':all'
}

apply from: "${rootDir}/common/extract_native_libraries.gradle"
test.dependsOn extract_wpilib
