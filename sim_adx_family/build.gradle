import edu.wpi.first.nativeutils.NativeUtils

apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: 'cpp'
apply plugin: 'java'

repositories {
    mavenCentral()
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release/"
    }
}

task packageNativeAdxFamilyFilesInJar(type: Jar) {
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                println binary.component.name
                if (binary.component.name == 'adx_family_jni') 
                {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}

build.dependsOn packageNativeAdxFamilyFilesInJar


def jniClasses = [
    'edu.wpi.first.hal.sim.mockdata.ADXL345_I2CAccelerometerDataJNI',
    'edu.wpi.first.hal.sim.mockdata.ADXL345_SPIAccelerometerDataJNI',
    'edu.wpi.first.hal.sim.mockdata.ADXL362AccelerometerDataJNI',
    'edu.wpi.first.hal.sim.mockdata.ADXRS450_GyroDataJNI'
]

if (!project.hasProperty('onlyAthena')) {
    ext.skipAthena = true

    apply from: "../config.gradle"


    model {
        jniConfigs {
            adx_family_jni(JNIConfig) {
                jniDefinitionClasses = jniClasses
                jniArmHeaderLocations = [ all: file("${projectDir}/src/arm-linux-jni") ]
                sourceSets = [ project.sourceSets.main ]
            }
        }
        dependencyConfigs {
            wpiutil(DependencyConfig) {
                groupId = 'edu.wpi.first.wpiutil'
                artifactId = 'wpiutil-cpp'
                headerClassifier = 'headers'
                ext = 'zip'
                version = getWpiUtilVersion()
                sharedConfigs = [ adx_family_jni: [] ]
            }
            halsim(DependencyConfig) {
                groupId = 'edu.wpi.first.hal'
                artifactId = 'hal'
                headerClassifier = 'headers'
                ext = 'zip'
                version = getHalHeadersVersion()
                sharedConfigs = [ adx_family_jni: []  ]
            }
            adxfamily(DependencyConfig) {
                groupId = 'edu.wpi.first.halsim'
                artifactId = 'halsim-adx_gyro_accelerometer'
                headerClassifier = 'headers'
                ext = 'zip'
                version = getHalHeadersVersion()
                sharedConfigs = [ adx_family_jni: [] ]
            }
        }
        components {
            adx_family_jni(NativeLibrarySpec) {
                baseName = 'adx_family_jni'
                sources {
                    cpp {
                        source {
                            srcDirs = ['src/main/native/sim']
                            includes = ['**/*.cpp']
                        }
                        exportedHeaders {
                            srcDirs = ["cpp/lib"]
                        }
                    }
                }
            }
        }
    }
}
