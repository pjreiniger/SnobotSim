import edu.wpi.first.nativeutils.NativeUtils


ext
{
    // Things for the base script
    libraryName = "snobotSimJni"
    getNativeVersion = { binary -> NativeUtils.getPlatformPath(binary) }

    jniClasses = [
        'com.snobot.simulator.jni.JoystickJni',
        'com.snobot.simulator.jni.MotorConfigFactoryJni',
        'com.snobot.simulator.jni.RobotStateSingletonJni',
        'com.snobot.simulator.jni.SimulationConnectorJni',
        'com.snobot.simulator.jni.SnobotSimulatorJni',
        'com.snobot.simulator.jni.module_wrapper.AccelerometerWrapperJni',
        'com.snobot.simulator.jni.module_wrapper.AnalogSourceWrapperJni',
        'com.snobot.simulator.jni.module_wrapper.DigitalSourceWrapperJni',
        'com.snobot.simulator.jni.module_wrapper.EncoderWrapperJni',
        'com.snobot.simulator.jni.module_wrapper.GyroWrapperJni',
        'com.snobot.simulator.jni.module_wrapper.RelayWrapperJni',
        'com.snobot.simulator.jni.module_wrapper.SolenoidWrapperJni',
        'com.snobot.simulator.jni.module_wrapper.SpeedControllerWrapperJni'
    ]
    
    libraryBaseName = 'snobotSimJni'
    librarySrcDirs = [ 'cpp']
    libraryHeaderDirs = [ 'cpp' ]
    
    include_navx_lib = true
    
    baseId = "snobot_sim_jni"
    baseArtifactId = 'snobot_sim_jni'
    artifactGroupId = 'com.snobot.simulator.snobot_sim_jni'
}


apply from: "${rootDir}/common/base_jni_script.gradle"


sourceSets {
    main {
        java {
            srcDirs = ["java/src"]
        }
    }
    test {
        java {
            srcDirs = ["java/unit_tests"]
            exclude '**/simulator_components/ctre/**'
            exclude '**/com/ctre/**'
        }
    }
}

apply from: "$rootDir/captureWpiLibraries.gradle"

task combineNativeLibrariesIntoOne(type: Jar) {

    dependsOn packageNativesnobotSimJniFilesInJar
    dependsOn captureWpiLibraries

    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    classifier = "uber_native-" + os_name;
    
    packageNativesnobotSimJniFilesInJar.outputs.files.each { 
        from(zipTree(it))
    }
    
    captureWpiLibraries.outputs.files.each {
        from(zipTree(it))
    }

    from(zipTree('../snobot_sim/build/snobotSim-native-' + os_name + ".jar"))
    
    project(':ctre_override').packageNativeCtreSimulationFilesInJar.outputs.files.each {
        from(zipTree(it))
    }
    
    project(':sim_extension_navx').packageNativenavx_simulator_jniFilesInJar.outputs.files.each {
        from(zipTree(it))
    }
}

dependencies {
    compile project(":snobot_sim_utilities")
    
    compile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    compile 'edu.wpi.first.cscore:cscore-java:' + getCsCoreVersion()
    
    testCompile 'junit:junit:4.12'
    testCompile 'edu.wpi.first.wpilibj:wpilibj-java:' + getWpilibjVersion()
    testRuntime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':all'
    testRuntime 'edu.wpi.first.cscore:cscore-jni:' + getCsCoreVersion() + ':all'
    testRuntime 'org.opencv:opencv-java:' + getWpilibOpencvVersion()
    testRuntime 'org.opencv:opencv-jni:' + getWpilibOpencvVersion() + ':all'
    testRuntime combineNativeLibrariesIntoOne.outputs.files
    testRuntime project(':sim_extension_navx').packageNativenavx_simulator_jniFilesInJar.outputs.files
    testRuntime project(':snobot_sim_jni').packageNativesnobotSimJniFilesInJar.outputs.files
    
    testCompile project(':ctre_override')
    testCompile "openrio.mirror.third.ctre:CTRE-phoenix-java:" + getCtreVersion()
    testCompile "openrio.mirror.third.kauailabs:navx-java:" + getNavxVersion()
    
}


model {
    exportsConfigs {
        snobotSimJni(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
    }
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ snobotSimJni: [] ]
        }
        halsim(DependencyConfig) {
            groupId = 'edu.wpi.first.hal'
            artifactId = 'hal'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getHalHeadersVersion()
            sharedConfigs = [ snobotSimJni: [] ]
        }
    }
    binaries {
        withType(NativeBinarySpec) {
        
            if(it.targetPlatform.architecture.name != "athena")
            {
                project(':snobot_sim').addSnobotSimToLinker(it)
            }
            else
            {
                buildable = false
            }
        }
        withType(StaticLibraryBinarySpec) {
            it.buildable = false
        }
    }
}
