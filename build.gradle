

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://raw.githubusercontent.com/pjreiniger/maven_repo/master/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

plugins {
    id 'net.ltgt.errorprone' version '0.0.15'
    id 'edu.wpi.first.NativeUtils' version '1.7.4'
    id 'edu.wpi.first.GradleJni' version '0.3.0' apply false
    id "com.diffplug.gradle.spotless" version "3.10.0"
    id 'com.gradle.build-scan' version '1.15.1'
    id "com.github.spotbugs" version "1.6.4"
}
apply plugin: 'nebula-aggregate-javadocs'


ext.build_simulator_cpp = false
ext.build_simulator_java = true

/////////////////////////////////////////
// Specify WPI Versions

ext.allwpilibVersion = {
    return '2018.4.1-20180630034724-1073-gebd41fe'
}

ext.getWpiUtilVersion = {
    return allwpilibVersion()
}
ext.getNtCoreVersion = {
    return allwpilibVersion()
}
ext.getCsCoreVersion = {
    return allwpilibVersion()
}

ext.getWpilibOpencvVersion = {
    return '3.2.0'
}
ext.getCtreVersion = {
    return '80.2.1.1'
    //return '5.3.1.0'
}
ext.getCtreSimVersion = {
    return 'V0_' + '5.2.1.1'
}
ext.getNavxVersion = {
    return '3.0.346'
}
ext.getWpiRepo = {
    //return "http://first.wpi.edu/FRC/roborio/maven/release/"
    return "http://first.wpi.edu/FRC/roborio/maven/development/"
}

ext.getJaci3rdPartyMirror = {
    return 'https://raw.githubusercontent.com/Open-RIO/Maven-Mirror/master/m2'
}

ext.getCtreOverrideRepo = {
    return "http://raw.githubusercontent.com/pjreiniger/maven_repo/master/"
}

repositories {
    mavenCentral()
    mavenLocal()

    maven { url getWpiRepo() }
    maven { url getJaci3rdPartyMirror() }
    maven { url getCtreOverrideRepo() }
}

/////////////////////////////////////////
ext {
    SpotBugsTask = com.github.spotbugs.SpotBugsTask
}

def getCtreNativeExtractedLocation() {
    
    def os_arch = System.getProperty('os.arch');
    def converted_arch = os_arch

    if (os_arch.equals("x86") || os_arch.equals("i386")) {
        converted_arch = 'x86'
    } else if (os_arch.equals("amd64") || os_arch.equals("x86_64")) {
        converted_arch = 'x86-64'
    }
    
    return "$rootDir/build/ctre_native" + "/" + org.gradle.internal.os.OperatingSystem.current().getFamilyName() + "/" + converted_arch
}

// Publshing Information

ext.maven_publishing_path = 'build/maven_repo/'
if(hasProperty('maven_repo'))
{
    ext.maven_publishing_path = maven_repo
}
ext.maven_publishing_path = new File(maven_publishing_path).getAbsolutePath()
println "Publishing maven to " + ext.maven_publishing_path.toString()

ext.maven_version = "2018-2.1.0"
if(hasProperty('maven_version'))
{
    ext.maven_version = maven_version
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

