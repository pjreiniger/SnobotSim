import edu.wpi.first.nativeutils.NativeUtils

apply plugin: 'edu.wpi.first.NativeUtils'


ext
{
    // Things for the base script
    libraryName = "tempHalSimShared"
    getNativeVersion = { binary -> NativeUtils.getPlatformPath(binary) }
    jniClasses = [
        'edu.wpi.first.hal.sim.mockdata.AccelerometerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.AnalogGyroDataJNI',
        'edu.wpi.first.hal.sim.mockdata.AnalogInDataJNI',
        'edu.wpi.first.hal.sim.mockdata.AnalogOutDataJNI',
        'edu.wpi.first.hal.sim.mockdata.AnalogTriggerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.DigitalPWMDataJNI',
        'edu.wpi.first.hal.sim.mockdata.DIODataJNI',
        'edu.wpi.first.hal.sim.mockdata.DriverStationDataJNI',
        'edu.wpi.first.hal.sim.mockdata.EncoderDataJNI',
        'edu.wpi.first.hal.sim.mockdata.I2CDataJNI',
        'edu.wpi.first.hal.sim.mockdata.PCMDataJNI',
        'edu.wpi.first.hal.sim.mockdata.PDPDataJNI',
        'edu.wpi.first.hal.sim.mockdata.PWMDataJNI',
        'edu.wpi.first.hal.sim.mockdata.RelayDataJNI',
        'edu.wpi.first.hal.sim.mockdata.RoboRioDataJNI',
        'edu.wpi.first.hal.sim.mockdata.SimulatorJNI',
        'edu.wpi.first.hal.sim.mockdata.SPIAccelerometerDataJNI',
        'edu.wpi.first.hal.sim.mockdata.SPIDataJNI',
    ]
    
    libraryBaseName = 'tempHalSimShared'
    librarySrcDirs = ['src/main/native/sim']
    libraryHeaderDirs = ['src/main/native/include']
    
    
    baseId = "temp_hal_sim"
    baseArtifactId = 'temp_hal_sim'
    artifactGroupId = 'com.snobot.simulator'
}

apply from: "${rootDir}/common/base_jni_script.gradle"

model {
    exportsConfigs {
        tempHalSimShared(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
    }
    
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ tempHalSimShared: [] ]
        }
        halsim(DependencyConfig) {
            groupId = 'edu.wpi.first.hal'
            artifactId = 'hal'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getHalHeadersVersion()
            sharedConfigs = [ tempHalSimShared: [] ]
        }
    
    }
}