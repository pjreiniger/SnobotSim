
apply plugin: 'maven-publish'
apply plugin: 'java'


task createReleaseJar(type: Jar) {
    classifier = "all"

    println "CREATING RELEASE JAR"

    configurations {
        subproject_jars
    }

    dependencies {
        subproject_jars project(":snobot_sim_utilities")
        subproject_jars jar.outputs.files

        if(build_simulator_cpp)
        {
            subproject_jars project(":snobot_sim_jni")
        }

        if(build_simulator_java)
        {
            subproject_jars project(":snobot_sim_java")
        }
    }

    //configurations.subproject_jars.each {
    //    if (it.toString().contains("snobot_sim")) {
    //        from zipTree(it)
    //    }
    //}
}


task javadoc(type: Javadoc, overwrite: true) {
    source = sourceSets.main.allJava
    classpath = configurations.compile

    javadoc.options.links("http://docs.oracle.com/javase/8/docs/api/")
    options.addStringOption "tag", "pre:a:Pre-Condition"
    options.addStringOption('Xdoclint:accessibility,syntax,reference,html', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from project(":snobot_sim_java").sourceSets.main.allSource
}

task createSimpleEclipseProject {

    doLast {
        // Copy the canned eclipse .project and .classpath
        copy {
            def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
            into destinationDir
            from new File("../scripts/boilerplates/EclipseProject")
        }

        // Copy all of the gui dependencies into a folder which will exist locally in the project
        copy {

            def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
            from configurations.runtime {
                into destinationDir.toString() + "/dependencies"
                exclude "jinput-*-natives-*.jar"
                exclude "cscore-java-*.jar" // Unnecessary, will be included in WPI Plugins
                exclude "ntcore-java-*.jar" // Unnecessary, will be included in WPI Plugins
                exclude "opencv-java-*.jar" // Unnecessary, will be included in WPI Plugins
                exclude "snobot_sim_utilities*.jar" // Bundled in the release jar
                exclude "snobot_sim_java.jar" // Bundled in the release jar
                exclude "*.zip"
            }
        }

        // Unzip the jinput native libraries into the dependency folder
        copy {
            def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
            from unzipNativeLibraries.outputs
            into destinationDir.toString() + "/dependencies/native"
        }

        copy {
            def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
            println project.buildDir.toString() + "/../../ctre_override/build/libs/ctreMockHooks/shared/x86-64"
            from(project.buildDir.toString() + "/../../ctre_override/build/libs/ctreMockHooks/shared/x86-64")
            from(project.buildDir.toString() + "/../../ctre_override/build/libs/ctrePhoenixJava/shared/x86-64")
            include "*.dll"
            include "*.so"
            into destinationDir.toString() + "/dependencies/native"
        }

        copy {
            def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
            from createReleaseJar.outputs
            into destinationDir.toString() + "/dependencies"
        }

        // Copy the main() class.  This makes the project not empty by default, and a little more intuitive to run
        copy {
            def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
            into destinationDir.toString() + "/src"
            from "snobot_sim"
            include "com/snobot/simulator/Main.java"
        }
    }
}

task zipEclipseProject(type: Zip, dependsOn: createSimpleEclipseProject) {
    classifier = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
    from project.buildDir.toString() + "/EclipseProject"
}

publishing {
    repositories {
       maven {
           url maven_publishing_path
       }
    }
    publications {
        snobot_sim_gui(MavenPublication) {
            groupId 'com.snobot.simulator'
            artifactId 'snobot_sim_gui'
            version maven_version

            artifact jar
            artifact javadocJar
            artifact sourcesJar
            artifact createReleaseJar
        }

        //snobot_sim_gui_application(MavenPublication) {
        //    groupId 'com.snobot.simulator'
        //    artifactId 'snobot_sim_gui_application'
        //    version maven_version
        //
        //    artifact distZip
        //    artifact distTar
        //}
        //
        snobot_sim_gui_eclipse_boilerplate(MavenPublication) {
            groupId 'com.snobot.simulator'
            artifactId 'snobot_sim_gui_eclipse_boilerplate'
            version maven_version

            artifact zipEclipseProject
        }
    }

}
