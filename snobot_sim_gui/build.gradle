
import org.gradle.internal.os.OperatingSystem

apply plugin: 'application'
apply from: "${rootDir}/common/base_java_script.gradle"

sourceSets {
    main {
        java {
            srcDirs = ["snobot_sim"]
        }
    }
    test {
        java {
            srcDirs = ["unit_tests"]
        }
    }
}

configurations {
    native3rdPartyDeps
    compile.extendsFrom(native3rdPartyDeps)
}

evaluationDependsOn(':temp_hal_sim')
apply from: "$rootDir/captureWpiLibraries.gradle"
dependencies {
    
    // WPILib
    compile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    compile 'edu.wpi.first.wpilibj:wpilibj-java:' + getWpilibjVersion()
    compile 'edu.wpi.first.wpiutil:wpiutil-java:' + getWpiUtilVersion()
    compile 'org.opencv:opencv-java:' + getWpilibOpencvVersion()
    compile 'edu.wpi.first.cscore:cscore-java:' + getCsCoreVersion()
    compile 'edu.wpi.first.cscore:cscore-jni:' + getCsCoreVersion() + ':all'
    runtime 'org.opencv:opencv-jni:' + getWpilibOpencvVersion() + ':all'
    runtime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':all'
    
    // 3rd Party
    native3rdPartyDeps  'net.java.jinput:jinput:2.0.7'
    compile 'jfree:jcommon:1.0.16'
    compile 'jfree:jfreechart:1.0.13'
    compile 'org.apache.logging.log4j:log4j-api:2.11.0'
    compile 'org.apache.logging.log4j:log4j-core:2.11.0'
    compile 'org.yaml:snakeyaml:1.18'
    compile 'com.miglayout:miglayout-swing:4.2'
    //compile 'org.python:jython:2.7.1b3'
    
    // Internal
    compile project(":snobot_sim_utilities")
    testRuntime captureWpiLibraries.outputs.files
    testRuntime project(':ctre_override').packageNativeCtreSimulationFilesInJar.outputs.files
    testRuntime project(':sim_extension_navx').packageNativenavx_simulator_jniFilesInJar.outputs.files
    testRuntime project(':sim_adx_family').packageNativeadx_family_jniFilesInJar.outputs.files
    testRuntime project(':temp_hal_sim').packageNativetempHalSimSharedFilesInJar.outputs.files
    
    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
    if(build_simulator_cpp)
    {
        compile project(":snobot_sim_jni")
        runtime     files("${rootDir}/snobot_sim_jni/build/libs/snobot_sim_jni-uber_native-" + os_name  +".jar")
        testRuntime files("${rootDir}/snobot_sim_jni/build/libs/snobot_sim_jni-uber_native-" + os_name  +".jar")
    }
    
    if(build_simulator_java)
    {
        compile project(":snobot_sim_java")
    }
    
    // Test
    testCompile 'junit:junit:4.12'
    testRuntime jar.outputs.files // Necessary for having resources in jar 
}


task unzipNativeLibraries(type: Copy) {

    configurations.native3rdPartyDeps.each {
        from zipTree(it)
        into "build/native_libs"
        include "**/*.dll"
        include "**/*.lib"
        include "**/*.pdb"
        include "**/*.so*"
        include "**/*.a"
        include "**/*.dylib*"
    }
    
    includeEmptyDirs = false
        
}

eclipse.classpath.file {
    withXml {
        provider ->
        provider.asNode().findAll { it.@path.contains("jinput") && !it.@path.contains("natives") }.each {
                def container = it
                container.appendNode('attributes').appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:"snobot_sim_gui/build/native_libs"])
        }
    }
}

build.dependsOn unzipNativeLibraries

if(build_simulator_cpp)
{
    compileJava.dependsOn(":snobot_sim_jni:build")
}
if(build_simulator_java)
{
    compileJava.dependsOn(":snobot_sim_java:build")
}

jar {
   baseName = "snobotSim"

   from("${rootDir}/snobot_sim_gui/snobot_sim") {
      include  '**/*.png'
   }
   from("${rootDir}/snobot_sim_gui/snobot_sim") {
      include  '**/*.properties'
   }
}

compileJava {
    apply from: "../create_version_file.gradle"
    createJavaVersion("snobot_sim/com/snobot/simulator", "SnobotSimGuiVersion", "com.snobot.simulator", getVersionName())
}
    
clean {
    delete "snobot_sim/com/snobot/simulator/SnobotSimGuiVersion.java"
}


apply from: "publish.gradle"


findbugs {
    ignoreFailures = true
}

///////////////////////////////////////////////////////////
// Build Application
mainClassName = "com.snobot.simulator.Main"
applicationDefaultJvmArgs = ["-Djava.library.path=../lib"]


distributions {
    main {
        contents {
            from(".") {
                into "bin"
                include "open_smart_dashboard.*"
            }
        }
    }

}

///////////////////////////////////////////////////////////
