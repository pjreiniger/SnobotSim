
evaluationDependsOn(':snobot_sim_utilities')

ext
{
    baseId = "snobot_sim_gui"
    additional_external_libraries = ["hal_shared", "wpiutil_shared", "snobot_sim_ctre_shared", "snobot_sim_rev_shared"]
    additional_local_libraries = []

    if (use_simulator_cpp)
    {
        additional_local_libraries += [[':snobot_sim', 'snobotSimCppBase', 'shared']]
        additional_local_libraries += [[':snobot_sim', 'snobotSimCppJNIShared', 'shared']]
    }
}

apply from: "${rootDir}/common/base_java_script.gradle"
apply from: "${rootDir}/common/base_java_native_script.gradle"

configurations {
    native3rdPartyDeps
    compile.extendsFrom(native3rdPartyDeps)
}

configurations.maybeCreate("wpilibNativeDeps")
dependencies {

    // WPILib
    compile 'edu.wpi.first.wpilibj:wpilibj-java:' + allwpilibVersion()
    compile 'edu.wpi.first.wpiutil:wpiutil-java:' + getWpiUtilVersion()
    compile 'edu.wpi.first.cscore:cscore-java:' + getCsCoreVersion()
    runtime 'edu.wpi.first.cscore:cscore-jni:' + getCsCoreVersion() + ':' + getCurrentOsArch()
    compile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    runtime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':' + getCurrentOsArch()
    runtime 'edu.wpi.first.hal:hal-jni:' + allwpilibVersion() + ':' + getCurrentOsArch()
    compile 'edu.wpi.first.thirdparty.frc2021.opencv:opencv-java:' + getWpilibOpencvVersion()
    runtime 'edu.wpi.first.thirdparty.frc2021.opencv:opencv-jni:' + getWpilibOpencvVersion() + ':' + getCurrentOsArch()


    // 3rd Party
    native3rdPartyDeps  'net.java.jinput:jinput:2.0.9'
    compile 'jfree:jcommon:1.0.16'
    compile 'jfree:jfreechart:1.0.13'
    compile 'org.yaml:snakeyaml:' + getSnakeYamlVersion()
    compile 'com.miglayout:miglayout-swing:5.2'
    //compile 'org.python:jython:2.7.1b3'

    // Internal
    compile project(":snobot_sim_utilities")
    compile project(":snobot_sim_joysticks")

    if(use_simulator_cpp)
    {
        compile project(":snobot_sim")
    }

    if(use_simulator_java)
    {
        compile project(":snobot_sim_java")
    }

    // Test
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testRuntime 'org.junit.platform:junit-platform-launcher:1.6.2'
    runtime 'com.snobot.simulator:ctre_sim_override:' + getCtreSimVersion() + ':' + getCurrentOsArch()
    runtime 'com.snobot.simulator:rev_simulator:' + getRevRoboticsSimVersion() + ':' + getCurrentOsArch()
}

eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.each {
            if(it.path.contains("jinput") && !it.path.contains("natives")) {
                it.setNativeLibraryLocation("snobot_sim_gui/build/native_libs")
            }
        }
    }
}

if(use_simulator_cpp)
{
    compileJava.dependsOn(":snobot_sim:build")
}
if(use_simulator_java)
{
    compileJava.dependsOn(":snobot_sim_java:build")
}

sourceSets.main.java.srcDir "${buildDir}/generated/java/"
compileJava {
    apply from: "${rootDir}/common/create_version_file.gradle"
    createJavaVersion("com/snobot/simulator", "SnobotSimGuiVersion", "com.snobot.simulator", getVersionName())
}

clean {
    delete "src/main/java/com/snobot/simulator/SnobotSimGuiVersion.java"
}


spotbugs {
    ignoreFailures = true
}
