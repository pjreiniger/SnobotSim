import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: "${rootDir}/common/config.gradle"

ext.addSnobotSimToLinker = { binary->
    binary.lib project: ':snobot_sim', library: 'snobotSimCpp', linkage: 'shared'
}

task packageNativeFilesInJar(type: Jar) {

    destinationDir = project.buildDir
    classifier = "snobotSim-native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == 'snobotSimCpp') {
                    dependsOn binary.buildTask
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}
build.dependsOn packageNativeFilesInJar


model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ snobotSimCpp: [] ]
        }
        halsim(DependencyConfig) {
            groupId = 'edu.wpi.first.hal'
            artifactId = 'hal-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = allwpilibVersion()
            sharedConfigs = [ snobotSimCpp: [], standaloneSnobotSimBase: [] ]
        }
        adxfamily(DependencyConfig) {
            groupId = 'edu.wpi.first.halsim'
            artifactId = 'halsim_adx_gyro_accelerometer'
            headerClassifier = 'headers'
            ext = 'zip'
            version = allwpilibVersion()
            sharedConfigs = [ snobotSimCpp: [] ]
        }
    }
    components {
        snobotSimCpp(NativeLibrarySpec) {
            baseName = 'snobot_sim'

            apply from: "${rootDir}/common/create_version_file.gradle"
            createCppVersion("SnobotSim", "SnobotSim", "SnobotSimHalVersion", getVersionName())

            sources {
                cpp {
                    source {
                        srcDirs = ['src/main/native/cpp', "$buildDir/generated/cpp"]
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include"]
                    }
                    lib project: ':sim_extension_navx', library: 'navx_simulator_jni', linkage: 'shared'
                }
            }
        }
    }
}

apply from: 'publish.gradle'
