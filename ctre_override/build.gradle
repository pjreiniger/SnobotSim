import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem

repositories {
    mavenCentral()
    
    maven {
        url "http://dev.imjac.in/maven/"
    }
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release/"
    }
}

apply plugin: 'cpp'
apply plugin: 'java'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'


test {
    ignoreFailures = !OperatingSystem.current().isWindows()
}

task packageNativeCtreFilesInJar(type: Jar) {
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                println binary.component.name
                if (binary.component.name == 'CtreSimulation') 
                {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}

ext.ctreHeaders = "${projectDir}/temp/driver/include"

build.dependsOn packageNativeCtreFilesInJar

dependencies {
    compile project(":snobot_sim_utilities")
}
                  
//def jniClasses = ['com.snobot.simulator.ctre.CtreJni']

model {
    //jniConfigs {
    //    CtreSimulation(JNIConfig) {
    //        jniDefinitionClasses = jniClasses
    //        jniArmHeaderLocations = [ all: file("${projectDir}/../snobot_sim_gui/src/arm-linux-jni") ]
    //        sourceSets = [ project.sourceSets.main ]
    //    }
    //}
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ CtreSimulation: [] ]
        }
    }
    exportsConfigs {
        CtreSimulation(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
    }

    components {
    
        CtreSimulation(NativeLibrarySpec) {
            baseName = 'CTRE_PhoenixCCI'

            sources {
                cpp {
                    source {
                        srcDirs = [ "src/main/native/cpp"]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = [ "src/main/native/include/CtreSimMocks", 
                                    ctreHeaders, 
                                    ctreHeaders + "/ctre/phoenix/jni",
                                    "${rootDir}/snobot_sim_gui/src/arm-linux-jni",
                                    "${rootDir}/snobot_sim_gui/src/arm-linux-jni/linux", ]
                                    
                        println srcDirs
                    }
                }
            }
        }
    }
}

//apply from: 'publish.gradle'
